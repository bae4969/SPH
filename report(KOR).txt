'report.docx'에 영어로 쓰기 전 먼저 한글로 쓴 글 입니다. 영문보다 한글로 읽는 것이 편한 분들을 위해 남겨놓았습니다. 'report.docx'의 내용과 다를 수 있고 최종적인 결과물은 'report.docx'입니다. 그러므로 밑의 내용은 참고만 해주시길 바랍니다.


	//////////////////////////////////////
	//	    요약		//
	//////////////////////////////////////

 이 프로젝트는 유체를 시뮬레이션하는 프로그램에 대한 실험이다. 유체는 결국 분자들로 이루어져있기 때문에 분자대신 구 모양 particle을 사용하면 유체를 표현과 시뮬레이션할 수 있지 않을까 해서 시작했다. 모래도 유체처럼 흐른다고 할 수 있기 때문에 모래처럼 particle에 물리 법칙을 적용하면 particle들이 유체처럼 흐를 수 있을 것이다. 그리고 이 particle의 위치를 기반으로 유체처럼 보이게 렌더링을 한다면 유체처럼 보이는 particle들이 흐를 것이다. 이러한 생각으로 이 프로젝트를 시작했다.


	//////////////////////////////////////
	//	    서문		//
	//////////////////////////////////////

 유체 시뮬레이터를 만들기 위해서는 유체 그래픽 렌더링과 유체의 움직임, 이 두 가지를 해결하는 것이 중요하다 생각했다. 유체를 어떻게 렌더링할지 고민하던 중 물은 여러 물 분자들로 구성되어 있다는 점을 생각했다. 인간의 눈에서 유체는 하나의 덩어리이지만 실제로는 매우 작은 알갱이들이 뭉친 것과 같다고 할 수 있다. 마치 모래 알갱이들이 뭉친 것과 같다. 그래서 이 알갱이들을 충분히 잘 표현해낸다면 유체처럼 보이게 될 것이라 생각했다. 추가적으로 이 알갱이 모델을 사용하면 유체의 움직임을 표현할 수 있다고 생각했다. 예를들어 사람들이 모래사막에서 모래들이 마치 물처럼 흐른다고 한다. 이처럼 알갱이모델을 사용한다면 유체 렌더링과 움직임 모두 표현할 수 있을 것이라 생각했다.


	//////////////////////////////////////
	//	    계획		//
	//////////////////////////////////////

		1. 물리

 앞서 설명했듯이 유체의 움직임을 표현하기 위해서는 particle간의 적절한 물리법칙이 필요하다. 모래 알갱이들에는 사실상 작용과 반작용 법칙만 존재한다. 물론 세세하게 따지면 정확하지는 않지만 단순화 하기 위해서 particle에 작용과 반작용 법칙만 적용하기로 했다. particle간의 충돌이 이루어지면 서로의 운동량을 교환하도록 계산했다. 만약 particle들이 에너지 손실이 없는 탄성 충돌을 하게 되면 끝없이 충돌하게 된다. 그래서 particle들이 충돌시 운동에너지가 조금씩 감소하게 설정했다.
 두 particle에 대한 작용 반작용의 공식은 고전 역학을 사용했다. 두 particle의 위치를 사용하여 충돌면의 법선 벡터를 구한다. 이 법선 벡터를 사용하여 두 particle의 가속도와 속도 벡터를 법선 벡터와 평행한 벡터와 아닌 벡터로 분해한다. 마지막으로 두 particle의 평행한 가속도, 속도 벡터를 교환하면 끝이난다. 아래의 그림과 같다.

		2. particle 렌더링

 실제 분자들은 여러개의 원자들로 이루어져 있다. 예를 들어 물은 수소2개와 산소 1개, 총 3개로 이루어져 있다. 여러개의 원자를 가진 분자 모델로 시뮬레이터를 만들기에는 연산량이 많아진다. 추가적으로 실제 분자의 크기와 분자간의 거리를 비교했을 때 분자의 크기보다 분자간의 거리가 더 크기때문에 충분히 무시할 수 있다고 생각했다. 그래서 시뮬레이터에서 분자 모델대신 단순한 구형 모델을 사용하기로 했다. 구형 모델을 사용할 경우 두 particle에 대한 거리를 구하는데 연산량이 줄어든다. 거리측정이 연산량이 적어질 경우 particle간의 충돌을 계산하기 쉬워진다. 구형 모델 particle의 지름 크기를 기준으로 크면 충돌하지 않고 작으면 충돌했다는 뜻이 되기 때문이다.
 particle이 구형으로 렌더링 된다면 전혀 물처럼 보이지 않을 것이다. particle들이 구슬처럼 보일 것이다. 그래서 볼륨 렌더링을 사용하기로 했다. 볼륨 렌더링을 위해 particle의 중심으로 가상의 표준분포 값을 구한다. 여러 particle의 이 값을 더한 뒤 문턱값을 적용한다. 문턱값을 넘으면 색이 표현되고 넘지 못하면 표현이 안 되도록 적용했다.
 만약 particle이 보이는 크기와 실제 크기가 같다면 두 particle의 사이의 볼륨 값은 문턱값을 넘기기가 힘들 것이다. 그래서 particle이 표현되는 크기보다 실제 충돌 판정이 이뤄 지는 크기를 조금 작게 만들었다.
 위의 두가지 기법을 한번에 적용시킬 경우 아래의 그림과 같이 유체처럼 표현될 것으로 기대된다. 그림과 같이 된다면 두개의 particle은 두개의 물방울처럼 보일것이다.

		3. 지형 렌더링

 지형또한 구형 particle 모델이어야 유체 particle과의 상호작용을 계산하기 쉬을 것이다. 하지만 지형을 만들기위해서는 기존의 폴리곤 형태로 렌더링하는 것이 새로운 지형을 만들기 쉽다. 왜냐하면 3개의 점에 대한 좌표만으로 하나의 면을 만들 수 있지만 particle의 형태로 면을 만들려면 면 안에 수많은 particle에 대한 좌표들이 필요하다. 지형 particle 하나하나 위치좌표를 찍어내는 것 보다는 폴리곤 삼각형 점 3개로 면 안에 particle로 가득 채울 필요가 있다. 그래서 3개의 점을 사용해서 일정한 위치마다 면 안에 일정한 간격으로 particle들이 만들어지도록 했다.
 만약 지형 particle을 일반 유체 particle과 같이 계산을 작용 반작용을 계산할 경우 지형 particle에 충돌한 유체 particle은 조금의 오차가 생길 수 있다. 그 이유는 충돌 모델은 구형이기에 유체 particle은 지형의 normal vector방향으로 계산되지 않는다. 구체적으로는 아래 그림과 같다. 그래서 지형 particle에는 법선 벡터를 저장해 두어서 유체 particle이 충돌시 이 벡터를 사용하여 다음 움직임을 계산할 수 있도록 했다.
 시뮬레이션 지형은 구불구불한 큰 계곡에서 유체가 흘러 중간에 두갈래 계곡으로 나누어지는 지형이다. 두갈래 계곡의 모양은 서로 다르게 되어있다. 이 지형에 유체는 폭포처럼 큰 계곡 위에 계속 생성되게 했다. 아래의 그림은 렌더링된 지형의 모습이다. 그림에서 파란색은 높은 지형 그리고 빨간색은 낮은 지형은 나타낸다.

		4. 데이터 구조

 우선 각 particle의 정보를 담을 데이터 구조가 필요하다. 물체의 움직임을 표현하기 위해서는 위치, 속도 그리고 가속도이 3가지가 필요하다. 그리고 particle이 유체 particle인지 지형 particle인지 표시할 필요가 있다. particle의 수가 많아 질수록 particle간의 충돌 검사의 횟수가 비선형적이게 증가한다. 그래서 더욱 적절한 데이터 구조가 필요했다. 두 particle의 거리가 충분히 멀다면 서로 충돌할 가능성이 전혀 없다. 그래서 때문에 충분히 거리가 떨어진 두 particle에 대해서는 충돌하는지 검사할 필요가 없다. 그래서 3차원 array에 linked list를 사용해서 particle의 위치에 따라 한 linked list에 추가한다. 그리고 추가된 linked list 주변에 있는 linked list에 있는 particle에 대해서만 충돌을 검사하면 되기에 필요한 연산량이 적어진다.

		5. 알고리즘

 매 프레임마다 particle의 데이터를 업데이트한 후 렌더링한다. particle의 데이터는 가속도, 속도 그리고 위치 순으로 업데이트 된다. 업데이트 과정은 다음과 같다. particle이 충돌이 일어나게 되면 두 particle은 비탄성 충돌로 서로 속도와 가속도를 새로 계산한다. 충돌 검사는 위의 데이터 구조 항목에서 설명한 것과 같이 진행된다. 그 다음 과정으로 particle의 속도에 중력가속도를 더한다. 이 과정으로 particle에 대한 가속도 값이 업데이트 된다. particle의 속도에 particle의 가속도를 더하면 particle에 대한 속도 데이터가 업데이트 된다. 마지막으로 particle은 속도만큼 이동하면 위치 데이터를 업데이트 한다. 
 particle의 데이터가 업데이트 되면 particle의 새로운 위치에 대하여 3차원 array linked list에 새롭게 재 할당해야 한다. 그래야지 다음 프레임에도 사용하고 볼륨 렌더링을 위한 볼륨 데이터를 만들 수 있기 때문이다. 재할당된 3차원 array linked list를 사용해 볼륨 데이터를 만들어 렌더링한다.


	//////////////////////////////////////
	//	    결과		//
	//////////////////////////////////////

 프로그램은 면 렌더링과 볼륨 렌더링으로 나누었다. 면 렌더링은 시각적인 효과를 빼고 particle들이 의도했던대로 움직이는지, particle의 충돌이 의도대로 발생하는지 확인하는 위한 것이다. 볼륨 렌더링은 면 렌더링에 시각적인 효과를 더한 것이다. 추가적으로 매 시뮬레이션 결과를 조금씩 다르게 하기 위하여 생성되는 particle의 초기 속도 벡터의 방향에 랜덤성을 부여했다. particle의 초기 속도 벡터의 방향은 전체적으로 비슷하지만 정확하게는 항상 다르다.
 particle의 움직임 부분에서는 반은 예상했던 결과가 나왔고 반은 예상하지 못한 방향으로 움직이는 것을 관찰할 수 있었다. particle 렌더링 부분에 대한 결과는 만족스러웠다. 문턱값을 활용한 볼륨 렌더링을 사용하니 두 particle들이 꽤 유체의 점성처럼 보인다.
 시뮬레이터에 대한 코드는 'https://github.com/bae4969/SPH'에 있다. visual studio를 사용하면 디버깅할 수 있다. 키보드 키를 입력하면 xyz축 회전, 확대, 축소, 일시정지, particle의 수 확인 등 여러가지 기능이 있다. 키 입력은 해당 링크의 README.md 파일에 자세히 적어 놓았다. 또한 이 파일에 면 렌더링과 볼륨 렌더링을 선택할 수 있는 방법이 적혀있다. 디버깅에 문제가 있을 수 있어 result video에 결과 동영상을 저장해놓았다.
 아래의 그림은 면 렌더링에 대한 시뮬레이션 결과이다. particle들이 큰 계곡에서 좌측으로 흐르고 우측도 흐른다. 큰 계곡의 첫번째 곡선에서 particle들의 방향이 좌측으로 편향되어서 좌측 작은 계곡에 먼저 흐르는 모습이다. 그러다 좌측 작은 계곡에 일정량이 되면 우측 작은 계곡으로 흐르는 모습을 볼 수 있다. 여러번의 시뮬레이션 결과에도 항상 위와 같은 결과를 보인다.
 아래의 그림은 볼륨 렌더링에 대한 시뮬레이션 결과이다. 뵬륨 렌더링 역시 면 렌더링과 비슷한 경항을 보인다. 유체의 흐름을 정확하게 보기위해 항상 지형 particle보다 유체 particle들이 보이게 했다.
 아래의 그림은 볼륨 렌더링에서 particle rendering에서 설명한 것과 같이 의도한 데로 particle들이 잘 표현되고 있다.


	//////////////////////////////////////
	//	    후기		//
	//////////////////////////////////////

 일반적인 물체는 정점을 연결한 면에 적절한 텍스쳐를 입혀서 표현했다. 하지만 유체는 일반적인 물체와 다르게 모양이 늘 변하고 두 유체 덩어리가 가까워 지면 하나의 덩어리로 바뀐다. 게다가 또 점성이 있다. 이러한 유체의 특징은 일반적인 물체에 적용하는 렌더링 방법으로는 표현하기 힘들었다. 하지만 이 프로젝트처럼 particle을 사용한다면 어느정도 유체의 흐름을 계산할 수 있었다. 추가적으로 particle의 위치를 사용하여 유체를 어느정도 표현할 수 있었다. 어느정도라는 뜻은 완벽하지 않다는 뜻이다. 이 프로젝트에서 두가지 문제점이 발견되었다.
 이 프로젝트의 첫번째 문제는 가끔 particle들이 예측 불가능한 방향으로 움직인다. 아마 particle간의 충돌 판정이 연속적으로 이루어지지 않은것으로 예상된다. 왜냐하면 현실의 particle들은 연속적으로 충돌 판정이 이뤄져서 particle들이 겹칠 일이 일어나지 않는다. 하지만 프로그램에서는 완벽하게 연속적이게 충돌 판정이 이뤄지지 않는다. 왜냐하면 프로그램상 particle들은 불연속적이게 움직이기 때문이다. 이 점을 중요하게 생각해서 최대한 짧은 간격으로 프레임 업데이트하도록 시도했다. 하지만 프레임 업데이트 간격이 줄어들어도 이 점이 개선되지 않았다. 불연속적인 물리 법칙보다 연속적인 물리 법칙이 필요한 것으로 보인다. 그래서 particle에 거리에 따른 인력과 척력을 사용한다면 더 좋은 결과가 있을 것으로 예상된다. 왜냐하면 힘을 시간에 적분할 경우 이동 거리가 되는데 인력과 척력이 불연속적이라도 어느정도 연속적인 경우와 비슷하게 적분값을 갖을 수 있기 때문이다.
 두번째 문제는 시뮬레이터의 실행 속도이다. 이 시뮬레이션에서 큰 지형도 많은 particle도 사용하지 않았다. 하지만 이 시뮬레이터의 속도는 느리게 실행한다. 분석한 결과 GPU보다는 CPU에서 병목이 생겼다. particle마다 충돌도 검사하고, 이동하고 볼륨 렌더링을 위한 데이터도 만드느라 프레임 업데이트 속도가 느린 것 같다. 그래서 싱글코어 대신 멀티코어를 활용한 프로그래밍을 했다면 더 좋은 퍼포먼스를 보여줄 수 있을 것으로 기대된다. 또는 CPU의 연산을 GPU가 대신할 수 있도록 프로그래밍 했더라면 더 좋았을것 같다.

















